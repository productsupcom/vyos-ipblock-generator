#!/bin/bash
set -e

case "$1" in
    configure)
        echo "Configuring VyOS IP Blocklist Generator..."
        
        # Check if we're running on VyOS
        if [ -f "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper" ]; then
            echo "VyOS detected, configuring firewall groups..."
            
            # Create VyOS firewall groups automatically
            /opt/vyatta/sbin/vyatta-cfg-cmd-wrapper begin
            
            # Create IPv4 network group
            /opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set firewall group network-group threats-blocklist-ipv4 description 'IPv4 Threat Intelligence (auto-created)'
            
            # Create IPv6 network group
            /opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set firewall group ipv6-network-group threats-blocklist-ipv6 description 'IPv6 Threat Intelligence (auto-created)'
            
            # Commit the changes
            if /opt/vyatta/sbin/vyatta-cfg-cmd-wrapper commit; then
                echo "✓ VyOS firewall groups created successfully"
            else
                echo "⚠ Warning: Failed to commit VyOS configuration, groups may already exist"
            fi
            
            /opt/vyatta/sbin/vyatta-cfg-cmd-wrapper end
            
            echo ""
            echo "VyOS firewall groups created! Next steps:"
            echo "1. Configure firewall rules to use these groups:"
            echo "   set firewall ipv4 forward filter rule 12 source group network-group 'threats-blocklist-ipv4'"
            echo "   set firewall ipv6 forward filter rule 16 source group ipv6-network-group 'threats-blocklist-ipv6'"
            echo "2. Run: vyos-ipblock --verbose"
            echo "3. Run: /config/scripts/sync-vyos-threats.sh"
            
        else
            echo "Non-VyOS system detected, skipping firewall group creation"
        fi
        
        # Create directories for configuration files
        mkdir -p /config/scripts
        mkdir -p /var/log/vyos-ipblock
        
        # Set proper permissions
        chmod 755 /config/scripts
        chmod 755 /var/log/vyos-ipblock
        
        echo ""
        echo "VyOS IP Blocklist Generator installed successfully!"
        echo "Configuration files: /config/scripts/"
        echo "Logs: /var/log/vyos-ipblock/"
        echo ""
        echo "Quick start:"
        echo "1. Test: vyos-ipblock --dry-run --verbose"
        echo "2. Run: vyos-ipblock --verbose"
        echo "3. Enable automation: systemctl enable --now vyos-ipblock.timer"
        ;;
        
    abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;
esac

# Automatically added by dh_installsystemd/13.6ubuntu1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'vyos-ipblock.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'vyos-ipblock.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'vyos-ipblock.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'vyos-ipblock.service' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installsystemd/13.6ubuntu1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'vyos-ipblock.timer' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'vyos-ipblock.timer'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'vyos-ipblock.timer' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'vyos-ipblock.timer' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installsystemd/13.6ubuntu1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -d /run/systemd/system ]; then
		systemctl --system daemon-reload >/dev/null || true
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		deb-systemd-invoke $_dh_action 'vyos-ipblock.service' 'vyos-ipblock.timer' >/dev/null || true
	fi
fi
# End automatically added section


exit 0
